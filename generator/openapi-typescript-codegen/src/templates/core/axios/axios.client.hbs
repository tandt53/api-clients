{{>header}}

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import FormData from 'form-data';

import { ApiError } from './ApiError';
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';
import { CancelablePromise } from './CancelablePromise';
import type { OnCancel } from './CancelablePromise';
import type { OpenAPIConfig } from './OpenAPI';
import { BinaryType } from './BinaryType';


{{>functions/isDefined}}


{{>functions/isString}}


{{>functions/isStringWithValue}}


{{>functions/isBlob}}


{{>functions/isFormData}}


{{>functions/isSuccess}}


{{>functions/base64}}


{{>functions/getQueryString}}


{{>functions/getUrl}}


{{>functions/isBinaryType}}


{{>functions/getFormData}}


{{>functions/resolve}}


{{>axios/getHeaders}}


{{>axios/getRequestBody}}


{{>axios/sendRequest}}


{{>axios/getResponseHeader}}


{{>axios/getResponseBody}}


{{>functions/catchErrorCodes}}


/**
 * Request method
 * @param config The OpenAPI configuration object
 * @param options The request options from the service
 * @returns CancelablePromise<ApiResult>
 * @throws ApiError
 */
export const axiosClient = (options: ApiRequestOptions, config?: OpenAPIConfig): CancelablePromise<ApiResult> => {
	return new CancelablePromise(async (resolve, reject, onCancel) => {
		config = config ?? OpenAPI;
		try {
			const url = getUrl(config, options);
			const formData = getFormData(options);
			const body = getRequestBody(options);
			const headers = await getHeaders(config, options, formData);

			if (!onCancel.isCancelled) {
				const response = await sendRequest<ApiResult>(config, options, url, body, formData, headers, onCancel);

				const result: ApiResult = {
					url,
					ok: isSuccess(response.status),
					status: response.status,
					statusText: response.statusText,
					data: response.data,
					headers: response.headers
				};

				resolve(result);
			}
		} catch (error) {
			reject(error);
		}
	});
};
