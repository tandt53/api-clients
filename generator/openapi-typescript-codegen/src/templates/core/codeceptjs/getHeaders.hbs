const getHeaders = async ( config: OpenAPIConfig, options: ApiRequestOptions, formData?: FormData): Promise<Record<string, string>> => {
	const configHeaders = {}; // headers info from OpenAPIConfig
	const optionHeaders = {}; // headers info from API options

	// infos from config
	const token = await resolve(options, config.TOKEN);
	const username = await resolve(options, config.USERNAME);
	const password = await resolve(options, config.PASSWORD);
	const additionalHeaders = await resolve(options, config.HEADERS);

	if (isStringWithValue(token)) {
		configHeaders['Authorization'] = `Bearer ${token}`;
	}

	if (isStringWithValue(username) && isStringWithValue(password)) {
		const credentials = base64(`${username}:${password}`);
		configHeaders['Authorization'] = `Basic ${credentials}`;
	}

	// info from form data
	const formHeaders =	(typeof formData?.getHeaders === 'function' && formData?.getHeaders()) || {};

	// info from request body
	if (options.body) {
		if (options.mediaType) {
			optionHeaders['Content-Type'] = options.mediaType;
		} else if (isBlob(options.body)) {
			optionHeaders['Content-Type'] =
			options.body.type || 'application/octet-stream';
		} else if (isString(options.body)) {
			optionHeaders['Content-Type'] = 'text/plain';
		} else if (!isFormData(options.body)) {
			optionHeaders['Content-Type'] = 'application/json';
		}
	}

	// merge all headers: configHeaders, optionHeaders, formHeaders
	const headers = Object.assign(
		{ ...additionalHeaders },
		configHeaders,
		options.headers,
		optionHeaders,
		formHeaders,
		);

	return headers;
};
